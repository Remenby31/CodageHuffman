-- Fonction pour unbounded String
function Avec_Guillemets (S: Unbounded_String) return String is
begin
   return '"' & To_String (S) & '"';
end;

function "&" (Left: String; Right: Unbounded_String) return String is
begin
   return Left & Avec_Guillemets (Right);
end;

function "+" (Item : in String) return Unbounded_String
              renames To_Unbounded_String;

--Fonctions Test

procedure Test_Calcul_Frequence is

   texte : String := "exemple de texte :";
   Tableau : T_Tableau;

begin
   Tableau := Calcul_Frequence(texte);
   Put_Line("Calcul Frequence terminÃ© !");
   Tri_selection(Tableau);
   Put_Line("Ok");

end Test_Calcul_Frequence;

procedure Test_Construire_Arbre is

   texte : string := "exemple de texte :" ;
   Tableau : T_Tableau;
begin
   Construire_Arbre(Tableau);
end Test_Construire_Arbre;

=== parcoursinfice tab ===
   generic
      with procedure Traiter(Frequence : in Integer; Caractere : in Character);
   procedure Parcours_infixe(Tableau : in T_Tableau);
   
=== Affichage Tab ===

   procedure AfficherTableau(Tableau : in T_Tableau) is

      procedure Affichage (Cle : in out Character; Donnee: in out Integer) is
      begin
         Put (Donnee,1);
         Put (" : ");
         Put (Cle);
         New_Line;
      end Affichage;
      
      procedure Affichage is
        new Parcours_Infixe(Traiter => Affichage);

   begin
      Parcours_Infixe(Tableau(1));
   end AfficherTableau;


procedure Tri_selection(Tableau : in out T_Tableau) is
         minimum : Integer;
         Tampon : T_Cellule;
      begin
         for I in 1..256 loop
            minimum := I;
            for J in (I+1)..256 loop
               if Tableau(I).all.Donnee > Tableau(J).all.Donnee then
                  minimum := J;
               end if;
            end loop;
            if minimum /= i then
               Tampon := Tableau(I);
               Tableau(I) := Tableau(minimum);
               Tableau(minimum) := Tampon;
            end if;
         end loop;
      end Tri_selection;
	  
	  =========================
	  
                 Put("(");Put(La_Donnee_Direct(Arbre),1);Put(")");
                  if Est_Feuille(Arbre) then
                     Put(" '");Put(La_Cle_Direct(Arbre));Put("'");
                  end if;
            
                  if not(Est_Vide(Arbre.all.Fils_gauche)) then
                     Put("\--0--");
               
               
               
                     --Put("appel de droite par "); Put(La_Donnee_Direct(Arbre),1);Put(" avec avant = [");Put(To_String(avant));
                     Afficher_Arbre(Arbre.all.Fils_gauche, avant & "|      ");
               
                  end if;


                  if not(Est_Vide(Arbre.all.Fils_droit)) then
                     Put("\--1--"); -- & "       "
               
                     --Put("appel de gauche par "); Put(La_Donnee_Direct(Arbre),1);Put(" avec avant = ");Put(To_String(avant));
                     Afficher_Arbre(Arbre.all.Fils_droit, avant);
                  end if;
               end if;
=============

(31) => retour a la ligne => char => --0--